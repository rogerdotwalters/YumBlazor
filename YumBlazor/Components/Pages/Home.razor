@page "/"
@using System.Globalization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IProductRepository ProductRepository
@inject ICategoryRepository CategoryRepository
@inject IShoppingCartRepository ShoppingCartRepository

<PageTitle>Home</PageTitle>
@if (IsProcessing)
{

    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="container-fluid px-0 m-0 full-width">
        <div class="jumbotron-custom">
            <div class="m-auto d-flex align-items-center" style="width: 400px; height: 50vh;">

                <div class="d-flex align-items-center" style="width: 100%;">
                    <input type="text" class="form-control rounded-pill"
                    @bind:event="oninput"
                    @bind:get="searchText"
                    @bind:set="FilterProductByName"
                    placeholder="Search for Food Items!"
                    style="width: 100%; padding: 20px;">
                    <span style="position: relative; left: -43px;"><i class="bi bi-search"></i></span>
                </div>
            </div>
        </div>

        <div class="content px-4 m-2">
            <ul class="nav nav-underline justify-content-center mb-2">

                <li class="nav-item">
                    <span class="nav-link @GetActiveTabeClass(0)" @onclick="() => FilterProducts(0)" style="cursor: pointer">All</span>
                </li>

                @foreach (Category category in Categories) {
                    
                    <li class="nav-item">
                                <span class="nav-link @GetActiveTabeClass(category.Id)" @onclick="() => FilterProducts(category.Id)" style="cursor: pointer">@category.Name</span>
                    </li>
                }

            </ul>
            <div class="row mt-4 mx-1">

                @foreach (Product product in FilteredProducts) {
                    <div class="col-12 col-md-6 col-lg-4 pe-3 mb-5">
                        <div class="card">
                            <div class="mt-3 mb-2 row">
                                <div class="col-6 px-3">
                                    @if (!string.IsNullOrEmpty(product.SpecialTag)) {
                                        
                                        <i class="bi bi-star btn btn-outline-success disabled"> SpecialTag</i>
                                    }
                                </div>
                                <div class="col-6 text-end text-danger px-3 h3">
                                    @product.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                                </div>
                            </div>
                            <div class="text-center">
                                
                                @if (!string.IsNullOrEmpty(product.ImageUrl)) {

                                    <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="@product.ImageUrl" style="" />
                                } else {
                                    
                                    <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="images/default.png" style="" />
                                }
                            </div>
                            <div class="card-body">
                                        <h5 class="card-title text-center lead text-success">@product.Name</h5>
                                        <p class="card-text mt-2">@((MarkupString)product.Description)</p>
                                <h4 class="text-center">
                                    <div class="m-lg-auto p-2" @onclick="() => AddOrderItem(product)">
                                        <i class="bi bi-cart3 btn btn-success text-right w-100 form-control" style="min-width:150px ; max-width:250px ;text-align:center"> Add to cart</i>
                                    </div>
                                </h4>

                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}
@code {
    private IEnumerable<Product> Products = new List<Product>();
    private IEnumerable<Category> Categories = new List<Category>();
    private IEnumerable<Product> FilteredProducts = new List<Product>();
    private bool IsProcessing { get; set; } = true;
    private int selectedCategoryId = 0;
    private string? searchText = "";


    protected override async Task OnAfterRenderAsync(bool firstRender) {

        if (firstRender) {

            await LoadProductsAndCategories();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProductsAndCategories() {

        await LoadProducts();
        await LoadCategories();
        FilterProducts(0);
    }

    private async Task LoadProducts() {

        Products = await ProductRepository.GetAllAsync();
    }

    private async Task LoadCategories() {

        Categories = await CategoryRepository.GetAllAsync();
    }

    private void FilterProducts(int categoryId) {

        if (categoryId == 0) {

            FilteredProducts = Products;
        } else {

            FilteredProducts = Products.Where(q => q.CategoryId == categoryId).ToList();
        }
        selectedCategoryId = categoryId;
        searchText = String.Empty;
    }

    private void FilterProductByName(string newValueOfSearchText) {

        if (string.IsNullOrWhiteSpace(newValueOfSearchText)) {

            FilteredProducts = Products;
        } else {

            FilteredProducts = Products.Where(q => q.Name.Contains(newValueOfSearchText,StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        searchText = newValueOfSearchText;
        selectedCategoryId = 0;
    }

    private string GetActiveTabeClass(int categoryId) {

        return categoryId == selectedCategoryId ? "active" : string.Empty;
    }

    private async Task AddOrderItem(Product product) {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var authenticated = user.Identity != null && user.Identity.IsAuthenticated;

        if (!authenticated) {

            NavigationManager.NavigateTo("account/login");
        } else {

            var result = await ShoppingCartRepository.UpdateCartAsync(user.FindFirst(q => q.Type.Contains("nameidentifier"))?.Value, product.Id, 1);

            if (result) {

                JS?.ToastrSuccess("Product added to cart successfully");
            } else {

                JS?.ToastrError("Error encountered");
            }
        }
    }
}
@page "/category"

@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _js

<BsModal OnModalConfirmation="ConfirmDelete" ButtonText="Delete" ModalTitle="Delete Category" Bootstrap="btn-danger"></BsModal>

@if (IsProcessing) {

    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
} else {

    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">
                        Category List
                    </h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="category/create" class="btn btn-lg btn-secondary" style="width:250px">
                        <i class="bi bi-plus-square"></i> Add New Category
                    </a>
                </div>
            </div>
            @if (Categories.Any()) {
             
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var obj in Categories) {
                         
                            <tr>
                                <td>
                                    @obj.Name
                                </td>
                                <td>
                                    <a href="@($"category/update/{obj.Id}")" class="btn btn-dark">
                                        <i class="bi bi-pencil-square"></i> Edit
                                    </a>
                                    <button class="btn btn-danger" @onclick="@(() => HandleDelete(obj.Id))">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@code {
    private bool IsProcessing { get; set; } = true;
    private IEnumerable<Category> Categories { get; set; } = new List<Category>();
    private int DeleteCategoryId { get; set; } = 0;

    protected override async Task OnInitializedAsync() {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {

        if (firstRender) {

            await LoadCategories();
            IsProcessing = false;
            StateHasChanged();
        }
        // return base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadCategories() {

        Categories = await _categoryRepository.GetAllAsync();
        //Load Categories
    }

    private void HandleDelete(int id) {

        DeleteCategoryId = id;
        _js.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete(bool isConfirmed) {

        IsProcessing = true;
        if (isConfirmed && DeleteCategoryId != 0) {

            var result = await _categoryRepository.DeleteAsync(DeleteCategoryId);
            if (result) {

                _js?.ToastrSuccess("Category Deleted");
            } else {

                _js?.ToastrError("Error Occurred During Deletion");
            }
            await LoadCategories();
        }
        DeleteCategoryId = 0;
        _js?.InvokeVoidAsync("HideConfirmationModal");
        IsProcessing = false;
    }
}
